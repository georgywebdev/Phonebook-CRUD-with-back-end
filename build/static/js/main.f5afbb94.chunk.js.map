{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","getAll","a","axios","get","response","data","create","newObject","post","update","id","put","deletePerson","delete","Notification","notification","Filter","filterValue","handleFilterChange","value","onChange","PersonForm","handleFormSubmit","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Persons","persons","handleDelete","personsToShow","filter","person","name","toLowerCase","includes","map","key","number","onClick","App","useState","setPersons","setNewName","setNewNumber","setFilterValue","setNotification","useEffect","personService","result","getPersons","event","preventDefault","personObject","some","window","confirm","personToUpdateId","find","updatedPerson","handleNotification","addedPerson","concat","personToDelete","message","setTimeout","currentTarget","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f5afbb94.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = async () => {\r\n  const response = await axios.get(baseUrl);\r\n  return response.data;\r\n};\r\n\r\nconst create = async (newObject) => {\r\n  const response = await axios.post(baseUrl, newObject);\r\n  return response.data;\r\n};\r\n\r\nconst update = async (id, newObject) => {\r\n  const response = await axios.put(`${baseUrl}/${id}`, newObject);\r\n  return response.data;\r\n};\r\n\r\nconst deletePerson = async (id) => {\r\n  const response = await axios.delete(`${baseUrl}/${id}`);\r\n  return response.data;\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  deletePerson,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\n\nconst Notification = ({ notification }) => {\n  if (notification === null) {\n    return null;\n  }\n\n  return <div>{notification}</div>;\n};\n\nconst Filter = ({ filterValue, handleFilterChange }) => {\n  return (\n    <div>\n      <p>\n        Filter shown with:{\" \"}\n        <input value={filterValue} onChange={handleFilterChange} />\n      </p>\n    </div>\n  );\n};\n\nconst PersonForm = ({\n  handleFormSubmit,\n  newName,\n  handleNameChange,\n  newNumber,\n  handleNumberChange,\n}) => {\n  return (\n    <div>\n      <form onSubmit={handleFormSubmit}>\n        <div>\n          Name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          Number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">Add</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst Persons = ({ persons, filterValue, handleDelete }) => {\n  const personsFilter = persons.filter((person) =>\n    person.name.toLowerCase().includes(filterValue)\n  );\n\n  const personsToShow = personsFilter.map((person) => (\n    <li key={person.id}>\n      {person.name} {person.number}{\" \"}\n      <button onClick={() => handleDelete(person.id)}>Delete</button>\n    </li>\n  ));\n\n  return (\n    <div>\n      <ul>{personsToShow}</ul>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filterValue, setFilterValue] = useState(\"\");\n  const [notification, setNotification] = useState(\"\");\n\n  useEffect(() => {\n    async function getPersons() {\n      const result = await personService.getAll();\n      setPersons(result);\n    }\n    getPersons();\n  }, []);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const personObject = {\n      name: newName,\n      number: newNumber,\n    };\n\n    if (\n      persons.some((person) => person.name === newName) &&\n      window.confirm(\n        `${newName} already exists in the phonebook, update the number with the new one?`\n      )\n    ) {\n      const personToUpdateId = persons.find((person) => person.name === newName)\n        .id;\n\n      const updatedPerson = await personService.update(\n        personToUpdateId,\n        personObject\n      );\n      handleNotification(`${updatedPerson.name} got a new number`);\n      setPersons(\n        persons.map((person) =>\n          person.id !== personToUpdateId ? person : updatedPerson\n        )\n      );\n      return;\n    }\n\n    const addedPerson = await personService.create(personObject);\n    setPersons(persons.concat(addedPerson));\n    setNewName(\"\");\n    handleNotification(`${addedPerson.name} added to phonebook.`);\n  };\n\n  const handleDelete = async (id) => {\n    const personToDelete = persons.find((person) => person.id === id);\n    if (\n      window.confirm(`Are you sure you want to delete ${personToDelete.name}?`)\n    ) {\n      setPersons(persons.filter((person) => person.id !== id));\n      handleNotification(`${personToDelete.name} deleted from the phonebook.`);\n      try {\n        await personService.deletePerson(id);\n      } catch (error) {\n        handleNotification(`Person ${personToDelete.name} is already deleted.`);\n        setPersons(persons.filter((person) => person.id !== id));\n      }\n    }\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.currentTarget.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.currentTarget.value);\n  };\n\n  const handleFilterChange = (event) => {\n    setFilterValue(event.currentTarget.value);\n  };\n\n  const handleNotification = (message) => {\n    setNotification(message);\n    setTimeout(() => {\n      setNotification(null);\n    }, 4000);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification notification={notification} />\n\n      <Filter\n        filterValue={filterValue}\n        handleFilterChange={handleFilterChange}\n      />\n\n      <h3>Add a new</h3>\n\n      <PersonForm\n        handleFormSubmit={handleFormSubmit}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        newName={newName}\n        newNumber={newNumber}\n      />\n\n      <h3>Numbers</h3>\n\n      <Persons\n        persons={persons}\n        handleDelete={handleDelete}\n        filterValue={filterValue}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}